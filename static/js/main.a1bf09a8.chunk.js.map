{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","markdown","onChangeText","react_default","a","createElement","className","id","onChange","value","Previewer","result","dangerouslySetInnerHTML","__html","marked","require","initialMarkdown","App","state","changeTextHandler","e","_this","setState","target","Editor_Editor","this","Previewer_Previewer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmBeA,MAjBf,SAAgBC,GAAO,IACbC,EAA2BD,EAA3BC,SAAUC,EAAiBF,EAAjBE,aAClB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,UACAH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACIE,GAAG,SACHD,UAAU,SACVE,SAAUN,EACVO,MAAOR,GAJX,aCKOS,MAXf,SAAmBV,GAAO,IACdW,EAAWX,EAAXW,OACV,OACER,EAAAC,EAAAC,cAAA,WAAUC,UAAU,mBACnBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,WACCH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,UAAUM,wBAAyB,CAACC,OAAQF,OCFxEG,SAASC,EAAQ,KACjBC,EAAkB,mQAwBTC,6MApBbC,MAAQ,CACNjB,SAAUe,KAGZG,kBAAoB,SAACC,GACnBC,EAAKC,SAAS,CACZrB,SAAUmB,EAAEG,OAAOd,iFAKrB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmB,EAAD,CAAQvB,SAAUwB,KAAKP,MAAMjB,SAAUC,aAAcuB,KAAKN,oBAC1DhB,EAAAC,EAAAC,cAACqB,EAAD,CAAWf,OAAQG,EAAOW,KAAKP,MAAMjB,oBAhB3B0B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a1bf09a8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Editor(props) {\r\n  const { markdown, onChangeText } = props;\r\n  return (\r\n    <section className=\"editor-wrapper\">\r\n      <h2 className=\"editor-title\">Editor</h2>\r\n      <form>\r\n        <textarea \r\n            id=\"editor\" \r\n            className=\"editor\"\r\n            onChange={onChangeText}\r\n            value={markdown}>editor</textarea>\r\n      </form>\r\n    </section>\r\n    \r\n  )\r\n}\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\n\r\nfunction Previewer(props) {\r\n    const { result } = props;\r\n  return (\r\n    <section  className=\"preview-wrapper\">\r\n     <h2 className=\"preview-title\">Preview</h2>\r\n      <div id=\"preview\" className=\"preview\" dangerouslySetInnerHTML={{__html: result}} >\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Previewer;\r\n","import React, { Component } from 'react';\nimport Editor from './components/Editor/Editor';\nimport Previewer from './components/Previewer/Previewer';\nimport './App.css';\n\nconst marked = require('marked');\nconst initialMarkdown = '# Im an h1\\n\\n## Im an h2\\n\\n[link](www.google.com)\\n\\nInline code `<div></div>`\\n\\n```\\nMulti line code:\\n\\n function foo() {}\\n```\\n\\n* item 1\\n* item 2\\n\\n> Block Quotes!\\n\\nEmbedded images:\\n![React Logo w/ Text](https://goo.gl/Umyytc)\\n\\n**Bold Text**';\n\nclass App extends Component {\n\n  state = {\n    markdown: initialMarkdown\n  }\n\n  changeTextHandler = (e) => {\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <Editor markdown={this.state.markdown} onChangeText={this.changeTextHandler}/>\n        <Previewer result={marked(this.state.markdown)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}